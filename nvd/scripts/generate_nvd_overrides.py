import os
import json
from glob import glob

from cpe.comp.cpecomp2_3_fs import CPEComponent2_3_FS
from cpe import CPE

from scripts.cpe_match import MatchCriteriaIdGenerator

generator = MatchCriteriaIdGenerator()

for anchore_enriched in glob("cve-data-enrichment/data/anchore/**/CVE-*.json"):
    with open(anchore_enriched) as f:
        enriched = json.load(f)

    cve_id = enriched["additionalMetadata"]["cveId"]
    year = cve_id.split("-")[1]

    override = {
        "_annotation": {
            "cve_id": enriched["additionalMetadata"]["cveId"],
            "reason": enriched["additionalMetadata"]["reason"],
            "generated_from": f"https://raw.githubusercontent.com/anchore/cve-data-enrichment/main/data/anchore/{year}/{cve_id}.json",
        },
        "cve": {},
    }

    affected = enriched["adp"]["affected"]

    if affected:
        override["cve"]["configurations"] = []

        for affected in affected:
            cpes = affected.get("cpes")
            if not cpes:
                continue

            versions = affected.get("versions")
            if not versions:
                continue

            configuration = {
                "nodes": []
            }
            
            for cpe in cpes:
                node = {
                    "cpeMatch": [],
                    "negate": False,
                    "operator": "OR"
                }

                for version in versions:
                    match = {
                        "criteria": cpe,
                        "vulnerable": version["status"] == "affected"
                    }

                    match_criteria = cpe
                    less_than = version.get("lessThan")
                    less_than_or_equal = version.get("lessThanOrEqual")
                    v = version["version"].strip()

                    if not less_than and not less_than_or_equal:
                        # This is a single affected version so set the version component in the CPE
                        c = CPE(cpe)

                        if c.is_application():
                            c.get("app")[0]["version"] = CPEComponent2_3_FS(v, "version")
                            match["criteria"] = c.as_fs()
                        elif c.is_operating_system():
                            c.get("os")[0]["version"] = CPEComponent2_3_FS(v, "version")
                            match["criteria"] = c.as_fs()
                        elif c.is_hardware():
                            c.get("hw")[0]["version"] = CPEComponent2_3_FS(v, "version")
                            match["criteria"] = c.as_fs()
                    elif v != "0":
                        match["versionStartIncluding"] = v

                    if less_than and less_than.strip() != "*":
                        match["versionEndExcluding"] = less_than.strip()
                    elif less_than_or_equal and less_than_or_equal.strip() != "*":
                        match["versionEndIncluding"] = less_than_or_equal.strip()

                    match["matchCriteriaId"] = generator.generate(match)
                    node["cpeMatch"].append(match)
                
                configuration["nodes"].append(node)

            override["cve"]["configurations"].append(configuration)

    override_path = f"nvd-data-overrides/data/{year}"

    if not os.path.exists(override_path):
        os.makedirs(override_path)

    with open(os.path.join(override_path, f"{cve_id}.json"), "w") as f:
        json.dump(override, f, ensure_ascii=False, sort_keys=True, indent=2)