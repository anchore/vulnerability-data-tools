import argparse
import json
import logging
import os

from glob import glob
from typing import Any

nvd_override_base_path = "nvd-data-overrides"
nvd_override_files = glob(os.path.join(nvd_override_base_path, "overrides/**/CVE-*.json"))
nvd_record_base_path = "national-vulnerability-database/data"

def get_existing_nvd_record(cve_id: str) -> dict[str, Any] | None:
    """
    Load an NVD record from the nvd_record_base_path location.

    Args:
        cve_id (str): A string containing a valid CVE ID

    Returns:
        dict: The parsed JSON for the NVD record

    By default the nvd_record_base_path location is
    ./national-vulnerability-database/data
    """
    cve_id = cve_id.upper()
    year = cve_id.split("-")[1]
    nvd_record_path = os.path.join(nvd_record_base_path, year, f"{cve_id}.json")
    if not os.path.exists(nvd_record_path):
        logging.debug(f"No NVD record for {cve_id}")
        return None
    
    with open(nvd_record_path, "r") as f:
        logging.debug(f"Loading current NVD record for {cve_id}")
        return json.load(f)

def get_existing_override(cve_id: str) -> dict[str, Any] | None:
    """
    Load an existing override record from the nvd-data-overrides directory

    Args:
        cve_id (str): A string containing a valid CVE ID

    Returns:
        dict: The parsed JSON for the override record

    By default the nvd_override_base_path location is
    ./nvd-data-overrides
    """
    cve_id = cve_id.upper()
    year = cve_id.split("-")[1]
    override_path = os.path.join(nvd_override_base_path, "data", year, f"{cve_id}.json")
    if not os.path.exists(override_path):
        logging.debug(f"No override for {cve_id}")
        return None
    
    with open(override_path, "r") as f:
        logging.debug(f"Loading existing override for {cve_id}")
        return json.load(f)

def persist_override(cve_id: str, nvd_record: dict[str, Any]):
    """
    Save override data to the nvd-data-overrides directory

    Args:
        cve_id (str): A string containing a valid CVE ID
        nvd_record (dict): The NVD record loaded from the get_existing_nvd_record function
        override_cpe_configurations (list): A list of the CPE configuration data
        notes (dict): A dictionary of notes to add to the override JSON

    Returns:
        Nothing

    By default the nvd_override_base_path location is
    ./nvd-data-overrides
    """
    cve_id = cve_id.upper()
    logging.info(f"Persisting NVD Override record for {cve_id}")
    nvd_override_record = {
        "_annotation": {
            "reason": None,
            "cve_id": cve_id,
            "needs_review": True,
        },
        "cve": {}
    }

    references = set()

    for r in nvd_record.get("cve", {}).get("references", []):
        url = r.get("url")
        if url:
            references.add(url)

    if references:
        # This is just a way to capture any additional information which might be 
        # useful in evaluating the generated cpe config and should always be removed 
        # prior to upload
        nvd_override_record["_annotation"]["triage_notes"] = {
            "references": list(references)
        }

    nvd_override_record["cve"]["configurations"] = nvd_record.get("cve", {}).get("configurations", [])
    
    nvd_record_state_capture = {
        "cve": {}
    }
    cpe_config = nvd_record["cve"].get("configurations")

    if cpe_config is not None:
        nvd_record_state_capture["cve"]["configurations"] = cpe_config

    year = cve_id.split("-")[1]
    nvd_override_record["_annotation"]["snapshot"] = f"https://raw.githubusercontent.com/anchore/nvd-data-overrides/main/.snapshot/{year}/{cve_id}.json"

    state_persist_dir = os.path.join(nvd_override_base_path, ".snapshot", year)
    override_persist_dir = os.path.join(nvd_override_base_path, "data", year)
    if not os.path.exists(state_persist_dir):
        os.makedirs(state_persist_dir, exist_ok=True)

    if not os.path.exists(override_persist_dir):
        os.makedirs(override_persist_dir, exist_ok=True)

    with open(os.path.join(state_persist_dir, f"{cve_id}.json"), "w") as fp:
        json.dump(nvd_record_state_capture, fp, indent=2, sort_keys=True)

    with open(os.path.join(override_persist_dir, f"{cve_id}.json"), "w") as fp:
        json.dump(nvd_override_record, fp, indent=2, sort_keys=True)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-c','--cves', nargs='+', help='<Required> CVEs to produce override records for based on existing NVD data record', required=True)
    args = parser.parse_args()

    for cve in args.cves:
        nvd = get_existing_nvd_record(cve_id=cve)

        if not nvd:
            logging.warning(f"No existing NVD record found for {cve}. Skipping")
            continue

        override = get_existing_override(cve_id=cve)
        if override:
            logging.warning(f"An override record already exists for {cve}. Skipping")
            continue

        persist_override(cve_id=cve, nvd_record=nvd)
