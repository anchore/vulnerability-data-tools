import json
import uuid

from glob import glob

namespace = uuid.uuid5(uuid.NAMESPACE_URL, "https://github.com/anchore/nvd-data-overrides")


class MatchCriteriaIdGenerator:
    def __init__(self):
        self._nvd_known_id_lookup = None

    def _load_known_nvd_id_lookups(self):
        self._nvd_known_id_lookup: dict[str, str] = {}

        for nvd_file in glob("national-vulnerability-database/data/**/CVE-*.json", recursive=True):
            with open(nvd_file) as f:
                data = json.load(f)

            cpe_configs = data.get("cve", {}).get("configurations", [])

            for c in cpe_configs:
                for n in c.get("nodes", []):
                    for m in n.get("cpeMatch", []):
                        match_id = m["matchCriteriaId"]
                        del m["matchCriteriaId"]
                        self._nvd_known_id_lookup[json.dumps(m, sort_keys=True)] = match_id

    def generate(self, match_criteria: dict) -> str:
        """
        Creates a stable UUID for a given set of match criteria.  It will use any known values from the NVD
        before attempting to create a new one. If in future we discover exactly how the NVD 
        generation works then in theory we should be able to exactly match any of their existing ids, 
        but I have not found any documentation around that so far.  This will ensure they at least 
        match across the override dataset.  We are not using the criteriaMatchId for anything, but others 
        might so we'll at least make them non-random  
        """
        if self._nvd_known_id_lookup is None:
            self._load_known_nvd_id_lookups()

        if "matchCriteriaId" in match_criteria:
            del match_criteria["matchCriteriaId"]

        s = json.dumps(match_criteria, sort_keys=True)
        return self._nvd_known_id_lookup.get(s, str(uuid.uuid5(namespace, s))).upper()

