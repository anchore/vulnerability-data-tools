import json
import logging
import sqlite3

from glob import glob

cve_assigners: dict[str, str] = {}
has_cpe: set[str] = set()
is_rejected: set[str] = set()
processed_ghsa: set[str] = set()

con = sqlite3.connect(".tmp/nvd-result.db")
for row in con.cursor().execute("SELECT record from results;"):
    nvd_json = json.loads(row[0])["item"]
    cve_id = nvd_json["cve"]["id"]
    assigner = nvd_json["cve"]["sourceIdentifier"]

    if nvd_json["cve"]["vulnStatus"] == "Rejected":
        is_rejected.add(cve_id)
        continue

    if not nvd_json["cve"].get("configurations"):
        cve_assigners[cve_id] = assigner
        continue

    has_cpe.add(cve_id)

for ghsa_file in glob(".tmp/github-advisory-database/advisories/github-reviewed/**/**/**/GHSA-*.json", recursive=True):
    with open(ghsa_file) as f:
        ghsa = json.load(f)
    
    ghsa_id = ghsa["id"]
    if ghsa_id in processed_ghsa:
        continue

    processed_ghsa.add(ghsa_id)

    if ghsa.get("withdrawn") is not None:
        continue
    
    cve_id = None
    for a in ghsa.get("aliases", []):
        if a.startswith("CVE-"):
            cve_id = a
            break

    if not cve_id or cve_id in is_rejected:
        continue

    if cve_id in has_cpe:
        continue

    affected = ghsa.get("affected")

    if len(affected) == 1:
        package = affected[0].get("package")
        if package:
            assigner = cve_assigners.get(cve_id)
            if not assigner:
                logging.warning(f"{cve_id} does not exist in cve project: {ghsa_id} - {json.dumps(package)}")
                continue
            logging.warning(f"{cve_id}, assigner: {assigner}: {ghsa_id} - {json.dumps(package)}")
