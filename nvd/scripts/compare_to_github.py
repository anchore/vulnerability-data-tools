import json
import logging
import sqlite3
import requests

from glob import glob

cve_to_packages: dict[str, set[str]] = {}
has_cpe = set()


def serialize_sets(obj):
    if isinstance(obj, set):
        return sorted(list(obj))

    return obj


def gather_secdb_fixes():
    urls = [
    #    "https://packages.wolfi.dev/os/security.json"
    ]

    for version in [
        "edge",
        *[f"v3.{i}" for i in range(2, 21)],
    ]:
        for t in ["main", "community"]:
            urls.append(f"https://secdb.alpinelinux.org/{version}/{t}.json")

    for url in urls:
        r = requests.get(url)
        if r.status_code != 200:
            continue

        data = r.json()

        for p in data["packages"]:
            package = p["pkg"]["name"]
            if package in {"intel-ucode"}:
                continue

            for _, cve_list in p["pkg"]["secfixes"].items():
                for cve_id in cve_list:
                    if not cve_id.startswith("CVE-"):
                        continue

                    if cve_id not in cve_to_packages:
                        cve_to_packages[cve_id] = set()
                    cve_to_packages[cve_id].add(package)


gather_secdb_fixes()

con = sqlite3.connect(".tmp/nvd-result.db")
for row in con.cursor().execute("SELECT record from results;"):
    nvd_json = json.loads(row[0])["item"]

    if not nvd_json["cve"].get("configurations"):
        continue

    has_cpe.add(nvd_json["cve"]["id"])

for ghsa_file in glob(".tmp/github-advisory-database/advisories/github-reviewed/**/**/**/GHSA-*.json", recursive=True):
    with open(ghsa_file) as f:
        ghsa = json.load(f)
    
    ghsa_id = ghsa["id"]
    if ghsa.get("withdrawn") is not None:
        continue
    
    cve_id = None
    for a in ghsa.get("aliases", []):
        if a.startswith("CVE-"):
            cve_id = a
            break

    if not cve_id:
        continue

    if cve_id in has_cpe:
        continue

    affected = ghsa.get("affected")

    if len(affected) == 1:
        package = affected[0].get("package")
        if package:
            logging.warning(f"{cve_id}: {ghsa_id} - {json.dumps(package)}")
