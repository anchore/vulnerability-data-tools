import json
import logging
import sqlite3

import requests

"""
crane export ghcr.io/anchore/grype-db/data/nvd:latest - | tar -Oxf - nvd/input/nvd-input.db > .tmp/nvd-input.db
crane export ghcr.io/anchore/grype-db/data/nvd:latest - | tar -Oxf - nvd/results/results.db > .tmp/nvd-result.db
"""

alpine_cve_to_packages: dict[str, set[str]] = {}
has_cpe = set()

def serialize_sets(obj):
    if isinstance(obj, set):
        return sorted(list(obj))

    return obj

def gather_alpine_fixes():
    for version in ["edge", "v3.20", "v3.19", "v3.18", "v3.17", "v3.16"]:
        for t in ["main", "community"]:
            data = requests.get(f"https://secdb.alpinelinux.org/{version}/{t}.json").json()

            for p in data["packages"]:
                package = p["pkg"]["name"]
                for _, cve_list in p["pkg"]["secfixes"].items():
                    for cve_id in cve_list:
                        if cve_id not in alpine_cve_to_packages:
                            alpine_cve_to_packages[cve_id] = set()
                        alpine_cve_to_packages[cve_id].add(package)

gather_alpine_fixes()

con = sqlite3.connect(".tmp/nvd-result.db")
for row in con.cursor().execute("SELECT record from results;"):
    nvd_json = json.loads(row[0])["item"]

    if not nvd_json["cve"].get("configurations"):
        continue

    has_cpe.add(nvd_json["cve"]["id"])

con = sqlite3.connect(".tmp/nvd-input.db")
for row in con.cursor().execute("SELECT record from results;"):
    nvd_json = json.loads(row[0])["item"]
    if nvd_json["cve"]["vulnStatus"] == "Rejected":
        continue

    cve_id = nvd_json["cve"]["id"]
    submitter = nvd_json["cve"]["sourceIdentifier"]
    if len(nvd_json["cve"].get("configurations", [])) > 0 or cve_id in has_cpe:
        continue

    if cve_id in alpine_cve_to_packages:
        logging.warning(f"{cve_id} - {submitter}: {alpine_cve_to_packages[cve_id]}")