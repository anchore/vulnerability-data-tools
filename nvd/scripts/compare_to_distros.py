import json
import logging
import sqlite3

import requests

"""
crane export ghcr.io/anchore/grype-db/data/nvd:latest - | tar -Oxf - nvd/input/nvd-input.db > .tmp/nvd-input.db
crane export ghcr.io/anchore/grype-db/data/nvd:latest - | tar -Oxf - nvd/results/results.db > .tmp/nvd-result.db
"""

cve_to_packages: dict[str, set[str]] = {}
has_cpe = set()


def serialize_sets(obj):
    if isinstance(obj, set):
        return sorted(list(obj))

    return obj


def gather_secdb_fixes():
    urls = [
#        "https://packages.wolfi.dev/os/security.json"
    ]

    for version in [
        "edge",
        *[f"v3.{i}" for i in range(2, 21)],
    ]:
        for t in ["main", "community"]:
            urls.append(f"https://secdb.alpinelinux.org/{version}/{t}.json")

    for url in urls:
        r = requests.get(url)
        if r.status_code != 200:
            continue

        data = r.json()

        for p in data["packages"]:
            package = p["pkg"]["name"]
            if package in {"intel-ucode"}:
                continue

            for version, cve_list in p["pkg"]["secfixes"].items():
                #if version == "0":
                #    continue

                for cve_id in cve_list:
                    if not cve_id.startswith("CVE-"):
                        continue

                    if cve_id not in cve_to_packages:
                        cve_to_packages[cve_id] = set()
                    cve_to_packages[cve_id].add(package)


gather_secdb_fixes()

con = sqlite3.connect(".tmp/nvd-result.db")
for row in con.cursor().execute("SELECT record from results;"):
    nvd_json = json.loads(row[0])["item"]

    if not nvd_json["cve"].get("configurations"):
        continue

    has_cpe.add(nvd_json["cve"]["id"])

con = sqlite3.connect(".tmp/nvd-input.db")
for row in con.cursor().execute("SELECT record from results;"):
    nvd_json = json.loads(row[0])["item"]
    if nvd_json["cve"]["vulnStatus"] == "Rejected":
        continue

    cve_id = nvd_json["cve"]["id"]
    submitter = nvd_json["cve"]["sourceIdentifier"]
    if len(nvd_json["cve"].get("configurations", [])) > 0 or cve_id in has_cpe:
        continue

    if cve_id in cve_to_packages:
        logging.warning(f"{cve_id} - {submitter}: {cve_to_packages[cve_id]}")
