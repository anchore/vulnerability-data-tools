# WIP
# CVE-2024-20925
#
# Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: JavaFX). 
# Supported versions that are affected are Oracle Java SE: 8u391; Oracle GraalVM Enterprise Edition: 20.3.12 and 21.3.8. 
# Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise 
# Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than 
# the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some 
# of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, 
# typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted 
# code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply 
# to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 
# CVSS 3.1 Base Score 3.1 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:N).
#
# https://whichjdk.com/ does a decent job of summarizing the current java support matrix as well as the most prominent 
# current and past re-distributions of OpenJDK
#
# CVE-2024-20925 specifically affects the "javafx/media" component of OpenJFX per OpenJDK announcement at https://openjdk.org/groups/vulnerability/advisories/2024-01-16
#
# Per further investigation, CVE-2024-20925 seems to correspond to JDK-8313105 (see: https://github.com/bmwiedemann/openSUSE/blob/5d8d39bcbcb271dd86a38ab4df05f4da97327374/packages/o/openjfx/openjfx.changes#L12)
#
# That then corresponds to the following commits:
# - https://github.com/openjdk/jfx17u/commit/18206453163dec04f36f8787ce73624bb9ba6a7d 
# - https://github.com/openjdk/jfx21u/commit/0c00753da13ed696b1a5025ce01ff478ee7ebd0a
# - https://github.com/openjdk/jfx/commit/0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11
# 
# It is unclear where the commit for fixing the 8.x release line is
#
# It seems that prior to Java 11, JavaFX was included in OpenJDK, but afterwards was refactored into a separate project OpenJFX with the code at https://github.com/openjdk/jfx.  See the following extract from the Amazon Correto FAQS: 
#
# From https://aws.amazon.com/corretto/faqs/:
# Q: Is JavaFX included with Corretto? If so, which versions of Corretto have it bundled?
#
# Before OpenJDK 11, JavaFX was included in OpenJDK. However, in 2018, Oracle decoupled JavaFX from OpenJDK, removing it from OpenJDK distributions. Corretto 8 does include JavaFX for the following platforms:
#
# AL2 x64
# Generic Linux x64
# Windows x86 JDK
# Windows x64 JDK
# Windows x86 JRE
# Windows x64 JRE
#
# We do not include it on other platforms, regardless of version. For example, JavaFX is not supported in Corretto 8 for Mac M1.
# We recommend that you upgrade to Corretto 17+, preferably Corretto 17, since this release will have more up-to-date code and generally perform better than its predecessors. In some instances you may wish to be on the latest JDK, which could be a short term support release with near EOL date. You can find and download the JFX releases from the JavaFX website.
#
#
# Amazon Corretto 8 fixed at Implementation version 8.402.07.1 (need the openjdk version though) per changelog at https://github.com/corretto/corretto-8/blob/2b0d156988533c56a3050bc17d15650d6308873d/CHANGELOG.md?plain=1#L52C37-L52C47
# https://github.com/corretto/corretto-8/blob/71d3524e1413013314edd4216f1c5588ea851cb8/javafx/patches/shared/0013-8313105-Improved-media-framing.patch#L4
# 
# OpenJFX can be installed in several ways per https://gluonhq.com/products/javafx/
# The JavaFX runtime is available as a platform-specific SDK, as a number of jmods, and as a set of artifacts in maven central
# The jfx maven component corresponding to this particular vuln: https://mvnrepository.com/artifact/org.openjfx/javafx-media
# 
# Azul provides a CVE source for their Azul Zulu builds at https://docs.azul.com/core/cve which can be helpful in determining which 
# OpenJDK release contained a particular "fix".  It also contains the specific implementer version which is needed for enumerating
# the affected ranges on their .apk, .deb, and .rpm based installs used in their official images.
#
# For OpenJDK prior to version 9, the version number had a 1 in the major version (Proposal for dropping the 1 from major version https://openjdk.org/jeps/223)
# There are inconsistencies in how the pre-v9 versions are represented, which is particularly important since v8 is still supported.  For now we should include both a 1.8.x_{} 
# number and and 8.x.+{} type range so that consumers should be able to match relevant ranges regardless of which represention is used
#
# Another resource for trying to determine bundle java fx version: https://edencoding.com/how-to-check-your-javafx-version/
# Information about building JavaFX for java 8 -> https://wiki.openjdk.org/display/OpenJFX/Building+OpenJFX+8u
#
# It seems like in version 8 and prior, javafx if installed will be at ${JAVA_HOM}/jre/lib/ext/jfxrt.jar

[[affected.github]]
owner = "openjdk"
repository = "jfx"

[[affected.github.version.ranges]]
fixed = "0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11"

[[affected.github]]
owner = "openjdk"
repository = "jfx22u"

[[affected.github.version.ranges]]
fixed = "0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11"

[[affected.github]]
owner = "openjdk"
repository = "jfx21u"

[[affected.github.version.ranges]]
fixed = "0c00753da13ed696b1a5025ce01ff478ee7ebd0a"

[[affected.github]]
owner = "openjdk"
repository = "jfx17u"

[[affected.github.version.ranges]]
fixed = "18206453163dec04f36f8787ce73624bb9ba6a7d"

# TODO: Determine what the 8.x commit was if possible

[[affected.maven]]
group_id = "org.openjfx"
artifact_id = "javafx-media"

# < 17.0.10
# >= 18-ea, < 21.0.2
# >= 22-ea, < 22-ea+27
# The default version type for maven packages is `maven`; however, the jfx project uses a non-standard pre-release
# indicator of -ea, and in standard maven version comparison logic, a -ea suffix will be treated as a post-release
# so for this component we switch the type to semver to ensure it will be evaluated as a pre-release 
[[affected.maven.version]]
type = "semver"

[[affected.maven.version.ranges]]
# TODO: It seems like useful information to capture the commit and other relevant information (PR, issues, etc) for the 
# specific version range that it applies; however, we also have to specify similar information for the `github` type artifact.
# Perhaps there is a better structure that would prevent the need for this duplication, but for now I'll go with this.
# OpenJDK projects are a bit unique in that there is a separate codde repo for each supported release series as well as 
# the current head development repo 
pr = "https://github.com/openjdk/jfx17u/pull/175"
commit = "https://github.com/openjdk/jfx17u/commit/18206453163dec04f36f8787ce73624bb9ba6a7d"
fixed = "17.0.10"

[[affected.maven.version.ranges]]
commit = "https://github.com/openjdk/jfx21u/commit/0c00753da13ed696b1a5025ce01ff478ee7ebd0a"
introduced = "18-ea"
fixed = "21.0.2"

[[affected.maven.version.ranges]]
commits = [
    "https://github.com/openjdk/jfx/commit/0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11", 
    "https://github.com/openjdk/jfx22u/commit/0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11"
]
introduced = "22-ea"
fixed = "22-ea+27"

# The Oracle advisory mentions GraalVM enterprise being affected - unsure about community edition.  Need to 
# TODO: Look further into this maven artifact and the corresponding source to try and make a determination
[[affected.maven]]
group_id = "org.graalvm.sdk"
artifact_id = "graal-sdk"

[[affected.maven.version.ranges]]
# TODO: Fill these in or remove this artifact

# This is the generic openjdk case where no further information was found -> it seems all of the implementations seem to pull in close
# enough to the same openjdk builds that we don't need to iterate each of them (at least not for this one)
# TODO: From the vulnerability data I've looked at thus far, it seems like the most important component for now is being able to
# distinguish between Oracle Java SE and the downstream OpenJDK distributions since at least the update components with 
# fixes for the Java 8 series seem to be slightly different.  This distinction may not matter for the more recent versions, but 
# that needs to be investigated further.
# Secondarily, being able to distingusih between JDK vs JRE components might be useful.  In this case the vulnerable component
# is OpenJFX, which is not really a part of either
# Third - distinguishing between JVM implementations
# This current format does not yet accomplish all of these so needs to be improved.  Possibly implementor could be used to determine
# Oracle Java SE vs OpenJDK.  I envisioned the purl potentially looking something like pkg:java/oracle/{jdk, jre, java-se}@<version> and for
# openjdk something like pkg:java/{jdk, jre}@<version> where the namespace is not provided if it is vanilla openjdk, but could be filled 
# in with a specific implementation if a particular implementation has patches that cause the affected ranges to be different from the
# upstream?  Anyways, still needs further thought, but I suspect the best way to figure out something better is to continue working through
# more examples -> I think it makes sense to focus on the non-openjfx ones going forward to remove another layer of complexity for now
[[affected.java]]
# Keep this simple for now -> it would be nice to have something more granular here, but unsure currently what that would be 
# This affects the JRE (so we'll also include JDK since that is JRE + extra stuff to ensure consumers find matches regardless of 
# whether or not they make a distinction here.
names = ["jre", "jdk", "jfx", "openjdk", "openjfx"]
components = ["javafx/media"]
statement = """
This vulnerability is only applicable to Java runtime environments which have bundled an affected version of JavaFX.  Oracle 
Java SE and Oracle GraalVM Enterprise Edition bundle these components by default; however, other distributions based on OpenJDK
often do not.  Please check the details of your Java installations to understand if this vulnerability might apply in your 
environment. 

For Java versions prior to 9, the existence of ${JAVA_HOME}/jre/lib/ext/jfxrt.jar can serve as an indicator that JavaFX
components are present.  In more modern versions, JavaFX can be installed as a stand-alone SDK, as a set of jmods typically
found at ${JAVA_HOME}/jmods/javafx.*.jmod, or as a set of jars per project from Maven Central
"""

# TODO: Need a way to allow distingusihing between implementer versions and OpenJDK versions (both tend to be specified in the 
# release file included with most jdk installations).  There is also a `JAVA_VERSION_DATE` which might be useful.  A full extract 
# from `eclipse-temurin:11.0.21_9-jre-alpine` is included below:
#
# cat /opt/java/openjdk/release
# IMPLEMENTOR="Eclipse Adoptium"
# IMPLEMENTOR_VERSION="Temurin-11.0.21+9"
# JAVA_RUNTIME_VERSION="11.0.21+9"
# JAVA_VERSION="11.0.21"
# JAVA_VERSION_DATE="2023-10-17"
# LIBC="musl"
# MODULES="java.base java.compiler java.datatransfer java.xml java.prefs java.desktop java.instrument java.logging java.management java.security.sasl java.naming java.rmi java.management.rmi java.net.http java.scripting java.security.jgss java.transaction.xa java.sql java.sql.rowset java.xml.crypto java.se java.smartcardio jdk.accessibility jdk.internal.vm.ci jdk.management jdk.unsupported jdk.internal.vm.compiler jdk.aot jdk.internal.jvmstat jdk.attach jdk.charsets jdk.compiler jdk.crypto.ec jdk.crypto.cryptoki jdk.dynalink jdk.internal.ed jdk.editpad jdk.hotspot.agent jdk.httpserver jdk.internal.le jdk.internal.opt jdk.internal.vm.compiler.management jdk.jartool jdk.javadoc jdk.jcmd jdk.management.agent jdk.jconsole jdk.jdeps jdk.jdwp.agent jdk.jdi jdk.jfr jdk.jlink jdk.jshell jdk.jsobject jdk.jstatd jdk.localedata jdk.management.jfr jdk.naming.dns jdk.naming.ldap jdk.naming.rmi jdk.net jdk.pack jdk.rmic jdk.scripting.nashorn jdk.scripting.nashorn.shell jdk.sctp jdk.security.auth jdk.security.jgss jdk.unsupported.desktop jdk.xml.dom jdk.zipfs"
# OS_ARCH="x86_64"
# OS_NAME="Linux"
# SOURCE=".:git:ef680be160c5"
# BUILD_SOURCE="git:0a454394ec842383e3d7c03aae5972ab24e10d85"
# BUILD_SOURCE_REPO="https://github.com/adoptium/temurin-build.git"
# SOURCE_REPO="https://github.com/adoptium/jdk11u.git"
# FULL_VERSION="11.0.21+9"
# SEMANTIC_VERSION="11.0.21+9"
# BUILD_INFO="OS: Linux Version: 5.15.0-48-generic"
# JVM_VARIANT="Hotspot"
# JVM_VERSION="11.0.21+9"
# IMAGE_TYPE="JRE"
#
# Unfortunately not all of these are included in all distributions, but at least these seem to be in the ones I have looked at so far:
# IMPLEMENTOR="Eclipse Adoptium"
# IMPLEMENTOR_VERSION="Temurin-11.0.21+9"
# JAVA_RUNTIME_VERSION="11.0.21+9"
# JAVA_VERSION="11.0.21"
# JAVA_VERSION_DATE="2023-10-17"


[[affected.java.version.ranges]]
fixed = "1.8.0_401"

[[affected.java.version.ranges]]
introduced = "1.9-0"
fixed = "8.0.401"

[[affected.java.version.ranges]]
introduced = "9-ea"
# It is possible that versions 11 and above are not actually affected because JavaFX 
# is not included in openjdk builds by default after that point; however, it depends on the distributor
fixed = "17.0.10" # TODO: <- This was the OpenJFX fix version, the OpenJDK version may be different

[[affected.java.version.ranges]]
introduced = "18-ea"
fixed = "21.0.2" # <- TODO: This was the OpenJFX fix version, the OpenJDK version may be different

[[affected.java.version.ranges]]
introduced = "22-ea"
fixed = "22-ea+27" # <- TODO: This was the OpenJFX fix version, the OpenJDK version may be different

# Azul specific entries (seems possibly they backported to earlier java version than 8 and also distribute as debs, 
# apks, etc in docker images that need to be separately accounted for (based on implementor version rather than OpenJDK version)
[[affected.apk]]
# TODO: Fill this in