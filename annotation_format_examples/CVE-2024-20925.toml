# WIP
# CVE-2024-20925
# This affects "javafx/media" per the OpenJDK announcement at https://openjdk.org/groups/vulnerability/advisories/2024-01-16
# Per further investigation, CVE-2024-20925 seems to correspond to JDK-8313105 (see: https://github.com/bmwiedemann/openSUSE/blob/5d8d39bcbcb271dd86a38ab4df05f4da97327374/packages/o/openjfx/openjfx.changes#L12)
# That then corresponds to the following commits:
# - https://github.com/openjdk/jfx17u/commit/18206453163dec04f36f8787ce73624bb9ba6a7d 
# - https://github.com/openjdk/jfx21u/commit/0c00753da13ed696b1a5025ce01ff478ee7ebd0a
# - https://github.com/openjdk/jfx/commit/0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11
# And commits in the https://github.com/openjdk/jfx seem to correspond
#
# It seems prior to Java 11 JavaFX was included in OpenJDK, but afterwards was refactored into a separate project.  See the following from Amazon Correto faqs: 
#
# From https://aws.amazon.com/corretto/faqs/:
# Q: Is JavaFX included with Corretto? If so, which versions of Corretto have it bundled?
#
# Before OpenJDK 11, JavaFX was included in OpenJDK. However, in 2018, Oracle decoupled JavaFX from OpenJDK, removing it from OpenJDK distributions. Corretto 8 does include JavaFX for the following platforms:
#
# AL2 x64
# Generic Linux x64
# Windows x86 JDK
# Windows x64 JDK
# Windows x86 JRE
# Windows x64 JRE
#
# We do not include it on other platforms, regardless of version. For example, JavaFX is not supported in Corretto 8 for Mac M1.
# We recommend that you upgrade to Corretto 17+, preferably Corretto 17, since this release will have more up-to-date code and generally perform better than its predecessors. In some instances you may wish to be on the latest JDK, which could be a short term support release with near EOL date. You can find and download the JFX releases from the JavaFX website.
#
#
# Amazon Corretto 8 fixed at Implementation version 8.402.07.1 (need the openjdk version though) per changelog at https://github.com/corretto/corretto-8/blob/2b0d156988533c56a3050bc17d15650d6308873d/CHANGELOG.md?plain=1#L52C37-L52C47
# https://github.com/corretto/corretto-8/blob/71d3524e1413013314edd4216f1c5588ea851cb8/javafx/patches/shared/0013-8313105-Improved-media-framing.patch#L4
# 
# OpenJFX can be installed in several ways per https://gluonhq.com/products/javafx/
# The JavaFX runtime is available as a platform-specific SDK, as a number of jmods, and as a set of artifacts in maven central
# The jfx maven component corresponding to this particular vuln: https://mvnrepository.com/artifact/org.openjfx/javafx-media
# 

[[affected.maven]]
group_id = "org.openjfx"
artifact_id = "javafx-media"

# < 17.0.10
# >= 18-ea, < 21.0.2
# >= 22-ea, < 22-ea+27
[[affected.maven.version.ranges]]
# PR: https://github.com/openjdk/jfx17u/pull/175
# Commit: https://github.com/openjdk/jfx17u/commit/18206453163dec04f36f8787ce73624bb9ba6a7d 
fixed = "17.0.10"

[[affected.maven.version.ranges]]
# Commit: https://github.com/openjdk/jfx21u/commit/0c00753da13ed696b1a5025ce01ff478ee7ebd0a
introduced = "18-ea"
fixed = "21.0.2"

[[affected.maven.version.ranges]]
# Commit: https://github.com/openjdk/jfx/commit/0a52a4cf1d1226e7a3c6d73313fde02e7f36fb11
introduced = "22-ea"
fixed = "22-ea+27"

# The Oracle advisory mentions GraalVM enterprise being affected - unsure about community edition.  Need to 
# TODO: Look further into this maven artifact and the corresponding source to try and make a determination
[[affected.maven]]
group_id = "org.graalvm.sdk"
artifact_id = "graal-sdk"

[[affected.maven.version.ranges]]
# TODO: Fill these in or remove this artifact

# This is the generic openjdk case where no further information was found -> it seems all of the implementations seem to pull in close
# enough to the same openjdk builds that we don't need to iterate each of them (at least not for this one)
[[affected.java]]
# Keep this simple for now -> it would be nice to have something more granular here, but unsure currently what that would be 
name = "jdk"
components = ["javafx/media"]

[[affected.java.version.ranges]]
fixed = "1.8.0_401"

[[affected.java.version.ranges]]
introduced = "9"
# It is possible that versions 11 and above are not actually affected because JavaFX 
# is not included in openjdk builds by default after that point; however, it is possible
fixed = "17.something" # <-- what was the fix?

# TODO: Fill in the rest of the version ranges for OpenJDK


# Azul specific entries (seems possibly they backported to earlier java version than 8 and also distribute as debs, apks, etc in docker images that need to be separately accounted for (based on implementor version rather than OpenJDK version)
[[affected.apk]]