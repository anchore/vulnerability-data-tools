package main

import (
	"path"

	"github.com/anchore/go-sync"
	"github.com/anchore/vulnerability-data-tools/cve-product-finder/internal/reader/cve"
	"github.com/anchore/vulnerability-data-tools/cve-product-finder/internal/reader/nvd"
	"github.com/anchore/vulnerability-data-tools/cve-product-finder/internal/search"
	. "github.com/anchore/vulnerability-data-tools/cve-product-finder/internal/util"
)

func processInputsToIndexes(executor sync.Executor, nvdDbFile, cveListDir string) search.Indexes {
	var timer = NewStopwatch()

	knownRecords := cve.ReadFiles(executor, path.Join(cveListDir, "*/**/*.json"))
	Log("cve individual record count: %v took: %v", len(knownRecords), timer.Lap())

	cveToVendorProduct := nvd.GetKnownCVEtoCPEs(nvdDbFile)
	Log("read nvd cpe records db in %v", timer.Lap())

	knownRecords = filterKnownRecordsToSingleCpe(cveToVendorProduct, knownRecords)
	Log("filtered to single-cpe known records; count: %v took: %v", len(knownRecords), timer.Lap())

	indexes := search.BuildIndexes(knownRecords)
	Log("build indexes took:", timer.Lap())

	return indexes
}

func filterKnownRecordsToSingleCpe(cveToVendorProduct map[string][]string, records []cve.Rec) []cve.Rec {
	var out []cve.Rec
	for _, r := range records {
		r, ok := filterKnownRecordToSingleCpe(cveToVendorProduct, r)
		if ok {
			out = append(out, r)
		}
	}
	return out
}

func filterKnownRecordToSingleCpe(cveToVendorProduct map[string][]string, r cve.Rec) (cve.Rec, bool) {
	if r.Cpe != "" {
		// already set, use it
		return r, true
	}

	if len(cveToVendorProduct[r.Cve]) != 1 {
		// none or too many values to know the right one
		return r, false
	}

	// exactly 1 record, use it
	r.Cpe = cveToVendorProduct[r.Cve][0]

	return r, true
}
