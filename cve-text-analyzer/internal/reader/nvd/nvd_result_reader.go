package nvd

import (
	"database/sql"
	"encoding/json"

	"github.com/facebookincubator/nvdtools/wfn"

	"github.com/anchore/grype-db/pkg/provider/unmarshal/nvd"
	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/reader/cpe"
	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/reader/cve"
	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/util"
)

type resultRecordEnvelope struct {
	Item nvd.Vulnerability `json:"item"`
}

func GetKnownCVEtoCPEs(nvdDbFile string) (cveToVendorProduct map[string][]string) {
	nvdDb := util.Get(sql.Open("sqlite", nvdDbFile))
	defer func() { util.Log(nvdDb.Close()) }()

	return readCpeToVendorProduct(nvdDb)
}

func readCpeToVendorProduct(db *sql.DB) (cveToVendorProduct map[string][]string) {
	cveToVendorProduct = map[string][]string{}

	query := util.Get(db.Prepare("select record from results"))
	rows := util.Get(query.Query())

	for rows.Next() {
		var record string
		util.Log(rows.Scan(&record))
		var row resultRecordEnvelope
		util.Log(json.Unmarshal([]byte(record), &row))

		cveRecord := row.Item.Cve
		cveId := cve.NormalizeCve(cveRecord.ID)

		vendorProduct := extractSingleVendorProduct(cveRecord)
		if vendorProduct != "" {
			cveToVendorProduct[cveId] = append(cveToVendorProduct[cveId], vendorProduct)
		}
	}

	return cveToVendorProduct
}

func extractSingleVendorProduct(cve nvd.CveItem) string {
	out := ""
	for _, conf := range cve.Configurations {
		for _, node := range conf.Nodes {
			for _, cpeMatch := range node.CpeMatch {
				w, err := wfn.Parse(cpeMatch.Criteria)
				if err == nil && w != nil {
					if out == "" {
						out = cpe.ToVendorProduct(w)
					} else {
						if out != cpe.ToVendorProduct(w) {
							return ""
						}
					}
				}
			}
		}
	}
	return out
}
