package search

import (
	"strconv"
	"strings"

	"golang.org/x/exp/maps"

	. "github.com/anchore/vulnerability-data-tools/cve-product-finder/internal/util"
)

// weightByYear Weights all the Terms based on the most recent year they appear in a CVE within
// the overall range of years; if the range is 2004-2024, and the year is 2024 this would be 1,
// if the year is 2014, this would be .5 and so on
func weightByYear(l Indexes) Indexes {
	min := 0
	max := 0
	for p := range l.allProducts {
		year := cveYear(p)
		if year <= 0 {
			continue
		}
		if min == 0 || year < min {
			min = year
		}
		if max == 0 || year > max {
			max = year
		}
	}

	// same year is 1
	min -= 1

	for p := range l.allProducts {
		year := cveYear(p)
		if year <= 0 {
			Log("no year for CPE:", p.Cpe, "from CVEs:", maps.Keys(p.Cves))
			continue
		}
		factor := float64(year-min) / float64(max-min)
		for term, weight := range p.Weights {
			p.Weights[term] = weight * factor
		}
	}

	return l
}

func cveYear(product *Product) int {
	year := 0
	for cve := range product.Cves {
		yearStr := strings.Split(cve, "-")[1] // "cve-YEAR-number"
		v := int(LogGet(strconv.ParseInt(yearStr, 10, 64)))
		if v > year {
			year = v
		}
	}
	return year
}
