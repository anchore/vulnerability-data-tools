package search

// weightByProductPercentage normalizes the word counts based on the total number of records for a Product
func weightByProductPercentage(l Indexes, factor float64) Indexes {
	for p := range l.allProducts {
		numRecords := float64(len(p.Cves))
		for term, weight := range p.Weights {
			p.Weights[term] = weight * (1 - factor + factor*p.Terms[term]/numRecords)
		}
	}
	return l
}

// weightByOverallFrequency Weights the Terms based on percentage of the total term counts
func weightByOverallFrequency(l Indexes, factor float64) Indexes {
	termTotals := l.termTotals()
	for p := range l.allProducts {
		for term, weight := range p.Weights {
			// pct has been normalized based on num records, but we need it in Terms of the global number of Terms
			p.Weights[term] = weight * (1 - factor + factor*p.Terms[term]/termTotals[term])
		}
	}
	return l
}
