package search

import (
	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/termset"
)

var skipTerms = termset.New(
	"of",
	"an",
	"a",
	"is",
	"for",
	"and",
	"with",
)

var keepTerms = termset.New(
	"php",
	"android",
	"java",
	"ibm",
	"github",
	"microsoft",
)

//func removeHighFrequencyTerms(l Indexes, topNumTerms int) Indexes {
//	termTotals := l.termTotals()
//
//	// get Terms sorted by frequency
//	terms := maps.Keys(l.termsToProducts)
//	slices.SortFunc(terms, func(a, b string) int {
//		numA := termTotals[a]
//		numB := termTotals[b]
//		if numA == numB {
//			return strings.Compare(a, b)
//		}
//		if numA > numB {
//			return -1
//		}
//		return 1
//	})
//
//	removeTerms := termset.Set{}
//	for _, term := range terms {
//		//if keepTerms.Has(term) || isNumber(term) {
//		//	continue
//		//}
//
//		for p := range l.termsToProducts[term] {
//			// if the id text has the term, keep it regardless of the frequency seen
//			if p.cpeTerms.Has(term) {
//				continue
//			}
//			l.removeProductTerm(p, term)
//		}
//
//		removeTerms.Add(term)
//		topNumTerms--
//		if topNumTerms <= 0 {
//			break
//		}
//	}
//
//	return l
//}
