package search

import (
	"bytes"
	"slices"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/stretchr/testify/require"
	"golang.org/x/exp/maps"

	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/reader/cve"
	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/util"
)

func Test_serialize(t *testing.T) {
	recs := []cve.Rec{
		{
			Cve: "CVE-2001-1234",
			Cpe: "thing:prod-uct:",
			Text: []string{
				"some prod-uct descriptive text",
			},
		},
		{
			Cve: "CVE-2001-2234",
			Cpe: "thing:prod-uct:",
			Text: []string{
				"some product descriptive texts",
			},
		},
		{
			Cve: "CVE-2024-3234",
			Cpe: "thing:prod-uct:",
			Text: []string{
				"some prod-uct descriptives text",
			},
		},
		{
			Cve: "CVE-2023-3234",
			Cpe: "server:thing:",
			Text: []string{
				"another server thing de-crypt-shun",
			},
		},
		{
			Cve: "CVE-2022-3234",
			Cpe: "server:thing:",
			Text: []string{
				"a server thing description text",
			},
		},
		{
			Cve: "CVE-2022-3234",
			Cpe: "lonely:words:",
			Text: []string{
				"all by myself",
			},
		},
	}

	indexes := BuildIndexes(recs)
	require.Contains(t, indexes.termsToProducts, "product")
	require.Len(t, indexes.allProducts, 3)

	buf := &bytes.Buffer{}
	err := indexes.Encode(buf)
	require.NoError(t, err)

	bufStr := buf.String()
	decoded := Indexes{}
	err = decoded.Decode(strings.NewReader(bufStr))
	require.NoError(t, err)

	// we're only serializing the weights, not the terms
	for p := range indexes.allProducts {
		p.Terms = nil
	}

	diff := cmp.Diff(indexes, decoded, setTransformer, indexesTransformer)

	if diff != "" {
		t.Fatal(diff)
	}
}

var setTransformer = cmp.Transformer("Set", func(in util.Set[*Product]) []*Product {
	out := maps.Keys(in)
	slices.SortFunc(out, ProductComparator)
	return out
})

var indexesTransformer = cmp.Transformer("Indexes", func(in Indexes) []any {
	return []any{
		in.termsToProducts,
		in.allProducts,
	}
})
