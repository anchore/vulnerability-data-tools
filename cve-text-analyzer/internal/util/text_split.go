package util

import (
	"net/url"
	"regexp"
	"strings"

	"github.com/fatih/camelcase"

	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/termset"
)

// GetTextTerms processes the text, returning a searchable set of individual terms
func GetTextTerms(fullText string) termset.Set {
	// split urls based on segments, e.g. github.com/org/repo will have distinct tokens
	fullText = urlPat.ReplaceAllStringFunc(fullText, func(match string) string {
		match = LogGet(url.PathUnescape(match))
		parts := urlSplitter.Split(match, -1)
		// ignore the scheme
		parts = parts[1:]

		// only keep known hosts
		//if !keepHosts.Has(parts[0]) {
		//	return ""
		//}

		out := ""
		for _, part := range parts {
			if len(part) > 2 {
				out += part + " "
			}
		}
		return out
	})

	out := termset.Set{}

	for _, term := range Whitespace.Split(fullText, -1) {
		// each word we get like some.thing some-thing some_thing split into separate words "some thing" and combine to "something"
		appendVariation(out, term)
		for _, part := range camelcase.Split(term) {
			appendVariation(out, part)
		}
		for _, part := range DisallowedChars.Split(term, -1) {
			appendVariation(out, part)
		}
	}

	out.SetAll(1)
	return out
}

func appendVariation(terms termset.Set, term string) {
	term = strings.ToLower(term)
	term = DisallowedChars.ReplaceAllString(term, "")
	if term == "" || IsHashLike(term) {
		return
	}
	terms.Add(term)
}

var urlPat = regexp.MustCompile(`https?://[^\s]+`)
var urlSplitter = regexp.MustCompile(`[./]`)

var keepHosts = termset.New(
	"github.com",
)

func isKnownVersionType(versionType string) bool {
	versionType = strings.ToLower(versionType)
	switch versionType {
	case "general", "release", "patch", "python", "rpm", "affected", "general availability", "semver", "maven", "original_commit_for_fix":
		return true
	default:
		return false
	}
}
